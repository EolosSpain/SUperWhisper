// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pluja/anysub/ent/transcription"
	"github.com/pluja/anysub/models"
)

// Transcription is the model entity for the Transcription schema.
type Transcription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// Diarize holds the value of the "diarize" field.
	Diarize bool `json:"diarize"`
	// Language holds the value of the "language" field.
	Language string `json:"language"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration"`
	// Task holds the value of the "task" field.
	Task string `json:"task"`
	// Device holds the value of the "device" field.
	Device string `json:"device"`
	// ModelSize holds the value of the "modelSize" field.
	ModelSize string `json:"modelSize"`
	// SourceUrl holds the value of the "sourceUrl" field.
	SourceUrl string `json:"sourceUrl"`
	// FileName holds the value of the "fileName" field.
	FileName string `json:"fileName"`
	// SpeakerMin holds the value of the "speaker_min" field.
	SpeakerMin int64 `json:"speaker_min"`
	// SpeakerMax holds the value of the "speaker_max" field.
	SpeakerMax int64 `json:"speaker_max"`
	// Result holds the value of the "result" field.
	Result models.TranscriptionResult `json:"result"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TranscriptionQuery when eager-loading is set.
	Edges        TranscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TranscriptionEdges holds the relations/edges for other nodes in the graph.
type TranscriptionEdges struct {
	// Translations holds the value of the translations edge.
	Translations []*Translation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e TranscriptionEdges) TranslationsOrErr() ([]*Translation, error) {
	if e.loadedTypes[0] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transcription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transcription.FieldResult:
			values[i] = new([]byte)
		case transcription.FieldDiarize:
			values[i] = new(sql.NullBool)
		case transcription.FieldID, transcription.FieldSpeakerMin, transcription.FieldSpeakerMax:
			values[i] = new(sql.NullInt64)
		case transcription.FieldStatus, transcription.FieldLanguage, transcription.FieldDuration, transcription.FieldTask, transcription.FieldDevice, transcription.FieldModelSize, transcription.FieldSourceUrl, transcription.FieldFileName:
			values[i] = new(sql.NullString)
		case transcription.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transcription fields.
func (t *Transcription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transcription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transcription.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case transcription.FieldDiarize:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field diarize", values[i])
			} else if value.Valid {
				t.Diarize = value.Bool
			}
		case transcription.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				t.Language = value.String
			}
		case transcription.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				t.Duration = value.String
			}
		case transcription.FieldTask:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task", values[i])
			} else if value.Valid {
				t.Task = value.String
			}
		case transcription.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				t.Device = value.String
			}
		case transcription.FieldModelSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field modelSize", values[i])
			} else if value.Valid {
				t.ModelSize = value.String
			}
		case transcription.FieldSourceUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceUrl", values[i])
			} else if value.Valid {
				t.SourceUrl = value.String
			}
		case transcription.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fileName", values[i])
			} else if value.Valid {
				t.FileName = value.String
			}
		case transcription.FieldSpeakerMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speaker_min", values[i])
			} else if value.Valid {
				t.SpeakerMin = value.Int64
			}
		case transcription.FieldSpeakerMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speaker_max", values[i])
			} else if value.Valid {
				t.SpeakerMax = value.Int64
			}
		case transcription.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Result); err != nil {
					return fmt.Errorf("unmarshal field result: %w", err)
				}
			}
		case transcription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transcription.
// This includes values selected through modifiers, order, etc.
func (t *Transcription) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTranslations queries the "translations" edge of the Transcription entity.
func (t *Transcription) QueryTranslations() *TranslationQuery {
	return NewTranscriptionClient(t.config).QueryTranslations(t)
}

// Update returns a builder for updating this Transcription.
// Note that you need to call Transcription.Unwrap() before calling this method if this Transcription
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transcription) Update() *TranscriptionUpdateOne {
	return NewTranscriptionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transcription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transcription) Unwrap() *Transcription {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transcription is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transcription) String() string {
	var builder strings.Builder
	builder.WriteString("Transcription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("diarize=")
	builder.WriteString(fmt.Sprintf("%v", t.Diarize))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(t.Language)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(t.Duration)
	builder.WriteString(", ")
	builder.WriteString("task=")
	builder.WriteString(t.Task)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(t.Device)
	builder.WriteString(", ")
	builder.WriteString("modelSize=")
	builder.WriteString(t.ModelSize)
	builder.WriteString(", ")
	builder.WriteString("sourceUrl=")
	builder.WriteString(t.SourceUrl)
	builder.WriteString(", ")
	builder.WriteString("fileName=")
	builder.WriteString(t.FileName)
	builder.WriteString(", ")
	builder.WriteString("speaker_min=")
	builder.WriteString(fmt.Sprintf("%v", t.SpeakerMin))
	builder.WriteString(", ")
	builder.WriteString("speaker_max=")
	builder.WriteString(fmt.Sprintf("%v", t.SpeakerMax))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", t.Result))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transcriptions is a parsable slice of Transcription.
type Transcriptions []*Transcription
