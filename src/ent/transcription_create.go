// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pluja/anysub/ent/transcription"
	"github.com/pluja/anysub/ent/translation"
	"github.com/pluja/anysub/models"
)

// TranscriptionCreate is the builder for creating a Transcription entity.
type TranscriptionCreate struct {
	config
	mutation *TranscriptionMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (tc *TranscriptionCreate) SetStatus(s string) *TranscriptionCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableStatus(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetDiarize sets the "diarize" field.
func (tc *TranscriptionCreate) SetDiarize(b bool) *TranscriptionCreate {
	tc.mutation.SetDiarize(b)
	return tc
}

// SetNillableDiarize sets the "diarize" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableDiarize(b *bool) *TranscriptionCreate {
	if b != nil {
		tc.SetDiarize(*b)
	}
	return tc
}

// SetLanguage sets the "language" field.
func (tc *TranscriptionCreate) SetLanguage(s string) *TranscriptionCreate {
	tc.mutation.SetLanguage(s)
	return tc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableLanguage(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetLanguage(*s)
	}
	return tc
}

// SetDuration sets the "duration" field.
func (tc *TranscriptionCreate) SetDuration(s string) *TranscriptionCreate {
	tc.mutation.SetDuration(s)
	return tc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableDuration(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetDuration(*s)
	}
	return tc
}

// SetTask sets the "task" field.
func (tc *TranscriptionCreate) SetTask(s string) *TranscriptionCreate {
	tc.mutation.SetTask(s)
	return tc
}

// SetNillableTask sets the "task" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableTask(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetTask(*s)
	}
	return tc
}

// SetDevice sets the "device" field.
func (tc *TranscriptionCreate) SetDevice(s string) *TranscriptionCreate {
	tc.mutation.SetDevice(s)
	return tc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableDevice(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetDevice(*s)
	}
	return tc
}

// SetModelSize sets the "modelSize" field.
func (tc *TranscriptionCreate) SetModelSize(s string) *TranscriptionCreate {
	tc.mutation.SetModelSize(s)
	return tc
}

// SetNillableModelSize sets the "modelSize" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableModelSize(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetModelSize(*s)
	}
	return tc
}

// SetSourceUrl sets the "sourceUrl" field.
func (tc *TranscriptionCreate) SetSourceUrl(s string) *TranscriptionCreate {
	tc.mutation.SetSourceUrl(s)
	return tc
}

// SetNillableSourceUrl sets the "sourceUrl" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableSourceUrl(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetSourceUrl(*s)
	}
	return tc
}

// SetFileName sets the "fileName" field.
func (tc *TranscriptionCreate) SetFileName(s string) *TranscriptionCreate {
	tc.mutation.SetFileName(s)
	return tc
}

// SetNillableFileName sets the "fileName" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableFileName(s *string) *TranscriptionCreate {
	if s != nil {
		tc.SetFileName(*s)
	}
	return tc
}

// SetSpeakerMin sets the "speaker_min" field.
func (tc *TranscriptionCreate) SetSpeakerMin(i int64) *TranscriptionCreate {
	tc.mutation.SetSpeakerMin(i)
	return tc
}

// SetNillableSpeakerMin sets the "speaker_min" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableSpeakerMin(i *int64) *TranscriptionCreate {
	if i != nil {
		tc.SetSpeakerMin(*i)
	}
	return tc
}

// SetSpeakerMax sets the "speaker_max" field.
func (tc *TranscriptionCreate) SetSpeakerMax(i int64) *TranscriptionCreate {
	tc.mutation.SetSpeakerMax(i)
	return tc
}

// SetNillableSpeakerMax sets the "speaker_max" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableSpeakerMax(i *int64) *TranscriptionCreate {
	if i != nil {
		tc.SetSpeakerMax(*i)
	}
	return tc
}

// SetResult sets the "result" field.
func (tc *TranscriptionCreate) SetResult(mr models.TranscriptionResult) *TranscriptionCreate {
	tc.mutation.SetResult(mr)
	return tc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableResult(mr *models.TranscriptionResult) *TranscriptionCreate {
	if mr != nil {
		tc.SetResult(*mr)
	}
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TranscriptionCreate) SetCreatedAt(t time.Time) *TranscriptionCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tc *TranscriptionCreate) SetNillableCreatedAt(t *time.Time) *TranscriptionCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// AddTranslationIDs adds the "translations" edge to the Translation entity by IDs.
func (tc *TranscriptionCreate) AddTranslationIDs(ids ...int) *TranscriptionCreate {
	tc.mutation.AddTranslationIDs(ids...)
	return tc
}

// AddTranslations adds the "translations" edges to the Translation entity.
func (tc *TranscriptionCreate) AddTranslations(t ...*Translation) *TranscriptionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTranslationIDs(ids...)
}

// Mutation returns the TranscriptionMutation object of the builder.
func (tc *TranscriptionCreate) Mutation() *TranscriptionMutation {
	return tc.mutation
}

// Save creates the Transcription in the database.
func (tc *TranscriptionCreate) Save(ctx context.Context) (*Transcription, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TranscriptionCreate) SaveX(ctx context.Context) *Transcription {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TranscriptionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TranscriptionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TranscriptionCreate) defaults() {
	if _, ok := tc.mutation.Status(); !ok {
		v := transcription.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Diarize(); !ok {
		v := transcription.DefaultDiarize
		tc.mutation.SetDiarize(v)
	}
	if _, ok := tc.mutation.Language(); !ok {
		v := transcription.DefaultLanguage
		tc.mutation.SetLanguage(v)
	}
	if _, ok := tc.mutation.Duration(); !ok {
		v := transcription.DefaultDuration
		tc.mutation.SetDuration(v)
	}
	if _, ok := tc.mutation.Task(); !ok {
		v := transcription.DefaultTask
		tc.mutation.SetTask(v)
	}
	if _, ok := tc.mutation.Device(); !ok {
		v := transcription.DefaultDevice
		tc.mutation.SetDevice(v)
	}
	if _, ok := tc.mutation.ModelSize(); !ok {
		v := transcription.DefaultModelSize
		tc.mutation.SetModelSize(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transcription.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TranscriptionCreate) check() error {
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transcription.status"`)}
	}
	if _, ok := tc.mutation.Diarize(); !ok {
		return &ValidationError{Name: "diarize", err: errors.New(`ent: missing required field "Transcription.diarize"`)}
	}
	if _, ok := tc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Transcription.language"`)}
	}
	if _, ok := tc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Transcription.duration"`)}
	}
	if _, ok := tc.mutation.Task(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required field "Transcription.task"`)}
	}
	if _, ok := tc.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required field "Transcription.device"`)}
	}
	if _, ok := tc.mutation.ModelSize(); !ok {
		return &ValidationError{Name: "modelSize", err: errors.New(`ent: missing required field "Transcription.modelSize"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Transcription.createdAt"`)}
	}
	return nil
}

func (tc *TranscriptionCreate) sqlSave(ctx context.Context) (*Transcription, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TranscriptionCreate) createSpec() (*Transcription, *sqlgraph.CreateSpec) {
	var (
		_node = &Transcription{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transcription.Table, sqlgraph.NewFieldSpec(transcription.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transcription.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Diarize(); ok {
		_spec.SetField(transcription.FieldDiarize, field.TypeBool, value)
		_node.Diarize = value
	}
	if value, ok := tc.mutation.Language(); ok {
		_spec.SetField(transcription.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := tc.mutation.Duration(); ok {
		_spec.SetField(transcription.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if value, ok := tc.mutation.Task(); ok {
		_spec.SetField(transcription.FieldTask, field.TypeString, value)
		_node.Task = value
	}
	if value, ok := tc.mutation.Device(); ok {
		_spec.SetField(transcription.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := tc.mutation.ModelSize(); ok {
		_spec.SetField(transcription.FieldModelSize, field.TypeString, value)
		_node.ModelSize = value
	}
	if value, ok := tc.mutation.SourceUrl(); ok {
		_spec.SetField(transcription.FieldSourceUrl, field.TypeString, value)
		_node.SourceUrl = value
	}
	if value, ok := tc.mutation.FileName(); ok {
		_spec.SetField(transcription.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := tc.mutation.SpeakerMin(); ok {
		_spec.SetField(transcription.FieldSpeakerMin, field.TypeInt64, value)
		_node.SpeakerMin = value
	}
	if value, ok := tc.mutation.SpeakerMax(); ok {
		_spec.SetField(transcription.FieldSpeakerMax, field.TypeInt64, value)
		_node.SpeakerMax = value
	}
	if value, ok := tc.mutation.Result(); ok {
		_spec.SetField(transcription.FieldResult, field.TypeJSON, value)
		_node.Result = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transcription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TranscriptionCreateBulk is the builder for creating many Transcription entities in bulk.
type TranscriptionCreateBulk struct {
	config
	err      error
	builders []*TranscriptionCreate
}

// Save creates the Transcription entities in the database.
func (tcb *TranscriptionCreateBulk) Save(ctx context.Context) ([]*Transcription, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transcription, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TranscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TranscriptionCreateBulk) SaveX(ctx context.Context) []*Transcription {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TranscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TranscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
