// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pluja/anysub/ent/predicate"
	"github.com/pluja/anysub/ent/translation"
	"github.com/pluja/anysub/models"
)

// TranslationUpdate is the builder for updating Translation entities.
type TranslationUpdate struct {
	config
	hooks    []Hook
	mutation *TranslationMutation
}

// Where appends a list predicates to the TranslationUpdate builder.
func (tu *TranslationUpdate) Where(ps ...predicate.Translation) *TranslationUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetSourceLanguage sets the "sourceLanguage" field.
func (tu *TranslationUpdate) SetSourceLanguage(s string) *TranslationUpdate {
	tu.mutation.SetSourceLanguage(s)
	return tu
}

// SetNillableSourceLanguage sets the "sourceLanguage" field if the given value is not nil.
func (tu *TranslationUpdate) SetNillableSourceLanguage(s *string) *TranslationUpdate {
	if s != nil {
		tu.SetSourceLanguage(*s)
	}
	return tu
}

// SetTargetLanguage sets the "targetLanguage" field.
func (tu *TranslationUpdate) SetTargetLanguage(s string) *TranslationUpdate {
	tu.mutation.SetTargetLanguage(s)
	return tu
}

// SetNillableTargetLanguage sets the "targetLanguage" field if the given value is not nil.
func (tu *TranslationUpdate) SetNillableTargetLanguage(s *string) *TranslationUpdate {
	if s != nil {
		tu.SetTargetLanguage(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TranslationUpdate) SetStatus(s string) *TranslationUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TranslationUpdate) SetNillableStatus(s *string) *TranslationUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// SetResult sets the "result" field.
func (tu *TranslationUpdate) SetResult(mr models.TranscriptionResult) *TranslationUpdate {
	tu.mutation.SetResult(mr)
	return tu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tu *TranslationUpdate) SetNillableResult(mr *models.TranscriptionResult) *TranslationUpdate {
	if mr != nil {
		tu.SetResult(*mr)
	}
	return tu
}

// Mutation returns the TranslationMutation object of the builder.
func (tu *TranslationUpdate) Mutation() *TranslationMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TranslationUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TranslationUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(translation.Table, translation.Columns, sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.SourceLanguage(); ok {
		_spec.SetField(translation.FieldSourceLanguage, field.TypeString, value)
	}
	if value, ok := tu.mutation.TargetLanguage(); ok {
		_spec.SetField(translation.FieldTargetLanguage, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(translation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.Result(); ok {
		_spec.SetField(translation.FieldResult, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TranslationUpdateOne is the builder for updating a single Translation entity.
type TranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranslationMutation
}

// SetSourceLanguage sets the "sourceLanguage" field.
func (tuo *TranslationUpdateOne) SetSourceLanguage(s string) *TranslationUpdateOne {
	tuo.mutation.SetSourceLanguage(s)
	return tuo
}

// SetNillableSourceLanguage sets the "sourceLanguage" field if the given value is not nil.
func (tuo *TranslationUpdateOne) SetNillableSourceLanguage(s *string) *TranslationUpdateOne {
	if s != nil {
		tuo.SetSourceLanguage(*s)
	}
	return tuo
}

// SetTargetLanguage sets the "targetLanguage" field.
func (tuo *TranslationUpdateOne) SetTargetLanguage(s string) *TranslationUpdateOne {
	tuo.mutation.SetTargetLanguage(s)
	return tuo
}

// SetNillableTargetLanguage sets the "targetLanguage" field if the given value is not nil.
func (tuo *TranslationUpdateOne) SetNillableTargetLanguage(s *string) *TranslationUpdateOne {
	if s != nil {
		tuo.SetTargetLanguage(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TranslationUpdateOne) SetStatus(s string) *TranslationUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TranslationUpdateOne) SetNillableStatus(s *string) *TranslationUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// SetResult sets the "result" field.
func (tuo *TranslationUpdateOne) SetResult(mr models.TranscriptionResult) *TranslationUpdateOne {
	tuo.mutation.SetResult(mr)
	return tuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tuo *TranslationUpdateOne) SetNillableResult(mr *models.TranscriptionResult) *TranslationUpdateOne {
	if mr != nil {
		tuo.SetResult(*mr)
	}
	return tuo
}

// Mutation returns the TranslationMutation object of the builder.
func (tuo *TranslationUpdateOne) Mutation() *TranslationMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TranslationUpdate builder.
func (tuo *TranslationUpdateOne) Where(ps ...predicate.Translation) *TranslationUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TranslationUpdateOne) Select(field string, fields ...string) *TranslationUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Translation entity.
func (tuo *TranslationUpdateOne) Save(ctx context.Context) (*Translation, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TranslationUpdateOne) SaveX(ctx context.Context) *Translation {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TranslationUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TranslationUpdateOne) sqlSave(ctx context.Context) (_node *Translation, err error) {
	_spec := sqlgraph.NewUpdateSpec(translation.Table, translation.Columns, sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Translation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, translation.FieldID)
		for _, f := range fields {
			if !translation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != translation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.SourceLanguage(); ok {
		_spec.SetField(translation.FieldSourceLanguage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TargetLanguage(); ok {
		_spec.SetField(translation.FieldTargetLanguage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(translation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Result(); ok {
		_spec.SetField(translation.FieldResult, field.TypeJSON, value)
	}
	_node = &Translation{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
