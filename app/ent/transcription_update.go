// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pluja/anysub/ent/predicate"
	"github.com/pluja/anysub/ent/transcription"
	"github.com/pluja/anysub/ent/translation"
	"github.com/pluja/anysub/models"
)

// TranscriptionUpdate is the builder for updating Transcription entities.
type TranscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *TranscriptionMutation
}

// Where appends a list predicates to the TranscriptionUpdate builder.
func (tu *TranscriptionUpdate) Where(ps ...predicate.Transcription) *TranscriptionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TranscriptionUpdate) SetStatus(s string) *TranscriptionUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableStatus(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// SetDiarize sets the "diarize" field.
func (tu *TranscriptionUpdate) SetDiarize(b bool) *TranscriptionUpdate {
	tu.mutation.SetDiarize(b)
	return tu
}

// SetNillableDiarize sets the "diarize" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableDiarize(b *bool) *TranscriptionUpdate {
	if b != nil {
		tu.SetDiarize(*b)
	}
	return tu
}

// SetLanguage sets the "language" field.
func (tu *TranscriptionUpdate) SetLanguage(s string) *TranscriptionUpdate {
	tu.mutation.SetLanguage(s)
	return tu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableLanguage(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetLanguage(*s)
	}
	return tu
}

// SetDuration sets the "duration" field.
func (tu *TranscriptionUpdate) SetDuration(s string) *TranscriptionUpdate {
	tu.mutation.SetDuration(s)
	return tu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableDuration(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetDuration(*s)
	}
	return tu
}

// SetTask sets the "task" field.
func (tu *TranscriptionUpdate) SetTask(s string) *TranscriptionUpdate {
	tu.mutation.SetTask(s)
	return tu
}

// SetNillableTask sets the "task" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableTask(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetTask(*s)
	}
	return tu
}

// SetDevice sets the "device" field.
func (tu *TranscriptionUpdate) SetDevice(s string) *TranscriptionUpdate {
	tu.mutation.SetDevice(s)
	return tu
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableDevice(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetDevice(*s)
	}
	return tu
}

// SetModelSize sets the "modelSize" field.
func (tu *TranscriptionUpdate) SetModelSize(s string) *TranscriptionUpdate {
	tu.mutation.SetModelSize(s)
	return tu
}

// SetNillableModelSize sets the "modelSize" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableModelSize(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetModelSize(*s)
	}
	return tu
}

// SetSourceUrl sets the "sourceUrl" field.
func (tu *TranscriptionUpdate) SetSourceUrl(s string) *TranscriptionUpdate {
	tu.mutation.SetSourceUrl(s)
	return tu
}

// SetNillableSourceUrl sets the "sourceUrl" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableSourceUrl(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetSourceUrl(*s)
	}
	return tu
}

// ClearSourceUrl clears the value of the "sourceUrl" field.
func (tu *TranscriptionUpdate) ClearSourceUrl() *TranscriptionUpdate {
	tu.mutation.ClearSourceUrl()
	return tu
}

// SetFileName sets the "fileName" field.
func (tu *TranscriptionUpdate) SetFileName(s string) *TranscriptionUpdate {
	tu.mutation.SetFileName(s)
	return tu
}

// SetNillableFileName sets the "fileName" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableFileName(s *string) *TranscriptionUpdate {
	if s != nil {
		tu.SetFileName(*s)
	}
	return tu
}

// ClearFileName clears the value of the "fileName" field.
func (tu *TranscriptionUpdate) ClearFileName() *TranscriptionUpdate {
	tu.mutation.ClearFileName()
	return tu
}

// SetResult sets the "result" field.
func (tu *TranscriptionUpdate) SetResult(mr models.TranscriptionResult) *TranscriptionUpdate {
	tu.mutation.SetResult(mr)
	return tu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableResult(mr *models.TranscriptionResult) *TranscriptionUpdate {
	if mr != nil {
		tu.SetResult(*mr)
	}
	return tu
}

// ClearResult clears the value of the "result" field.
func (tu *TranscriptionUpdate) ClearResult() *TranscriptionUpdate {
	tu.mutation.ClearResult()
	return tu
}

// SetCreatedAt sets the "createdAt" field.
func (tu *TranscriptionUpdate) SetCreatedAt(t time.Time) *TranscriptionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tu *TranscriptionUpdate) SetNillableCreatedAt(t *time.Time) *TranscriptionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// AddTranslationIDs adds the "translations" edge to the Translation entity by IDs.
func (tu *TranscriptionUpdate) AddTranslationIDs(ids ...int) *TranscriptionUpdate {
	tu.mutation.AddTranslationIDs(ids...)
	return tu
}

// AddTranslations adds the "translations" edges to the Translation entity.
func (tu *TranscriptionUpdate) AddTranslations(t ...*Translation) *TranscriptionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTranslationIDs(ids...)
}

// Mutation returns the TranscriptionMutation object of the builder.
func (tu *TranscriptionUpdate) Mutation() *TranscriptionMutation {
	return tu.mutation
}

// ClearTranslations clears all "translations" edges to the Translation entity.
func (tu *TranscriptionUpdate) ClearTranslations() *TranscriptionUpdate {
	tu.mutation.ClearTranslations()
	return tu
}

// RemoveTranslationIDs removes the "translations" edge to Translation entities by IDs.
func (tu *TranscriptionUpdate) RemoveTranslationIDs(ids ...int) *TranscriptionUpdate {
	tu.mutation.RemoveTranslationIDs(ids...)
	return tu
}

// RemoveTranslations removes "translations" edges to Translation entities.
func (tu *TranscriptionUpdate) RemoveTranslations(t ...*Translation) *TranscriptionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TranscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TranscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TranscriptionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TranscriptionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TranscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transcription.Table, transcription.Columns, sqlgraph.NewFieldSpec(transcription.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transcription.FieldStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.Diarize(); ok {
		_spec.SetField(transcription.FieldDiarize, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Language(); ok {
		_spec.SetField(transcription.FieldLanguage, field.TypeString, value)
	}
	if value, ok := tu.mutation.Duration(); ok {
		_spec.SetField(transcription.FieldDuration, field.TypeString, value)
	}
	if value, ok := tu.mutation.Task(); ok {
		_spec.SetField(transcription.FieldTask, field.TypeString, value)
	}
	if value, ok := tu.mutation.Device(); ok {
		_spec.SetField(transcription.FieldDevice, field.TypeString, value)
	}
	if value, ok := tu.mutation.ModelSize(); ok {
		_spec.SetField(transcription.FieldModelSize, field.TypeString, value)
	}
	if value, ok := tu.mutation.SourceUrl(); ok {
		_spec.SetField(transcription.FieldSourceUrl, field.TypeString, value)
	}
	if tu.mutation.SourceUrlCleared() {
		_spec.ClearField(transcription.FieldSourceUrl, field.TypeString)
	}
	if value, ok := tu.mutation.FileName(); ok {
		_spec.SetField(transcription.FieldFileName, field.TypeString, value)
	}
	if tu.mutation.FileNameCleared() {
		_spec.ClearField(transcription.FieldFileName, field.TypeString)
	}
	if value, ok := tu.mutation.Result(); ok {
		_spec.SetField(transcription.FieldResult, field.TypeJSON, value)
	}
	if tu.mutation.ResultCleared() {
		_spec.ClearField(transcription.FieldResult, field.TypeJSON)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transcription.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !tu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TranscriptionUpdateOne is the builder for updating a single Transcription entity.
type TranscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranscriptionMutation
}

// SetStatus sets the "status" field.
func (tuo *TranscriptionUpdateOne) SetStatus(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableStatus(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// SetDiarize sets the "diarize" field.
func (tuo *TranscriptionUpdateOne) SetDiarize(b bool) *TranscriptionUpdateOne {
	tuo.mutation.SetDiarize(b)
	return tuo
}

// SetNillableDiarize sets the "diarize" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableDiarize(b *bool) *TranscriptionUpdateOne {
	if b != nil {
		tuo.SetDiarize(*b)
	}
	return tuo
}

// SetLanguage sets the "language" field.
func (tuo *TranscriptionUpdateOne) SetLanguage(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetLanguage(s)
	return tuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableLanguage(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetLanguage(*s)
	}
	return tuo
}

// SetDuration sets the "duration" field.
func (tuo *TranscriptionUpdateOne) SetDuration(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetDuration(s)
	return tuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableDuration(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetDuration(*s)
	}
	return tuo
}

// SetTask sets the "task" field.
func (tuo *TranscriptionUpdateOne) SetTask(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetTask(s)
	return tuo
}

// SetNillableTask sets the "task" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableTask(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetTask(*s)
	}
	return tuo
}

// SetDevice sets the "device" field.
func (tuo *TranscriptionUpdateOne) SetDevice(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetDevice(s)
	return tuo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableDevice(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetDevice(*s)
	}
	return tuo
}

// SetModelSize sets the "modelSize" field.
func (tuo *TranscriptionUpdateOne) SetModelSize(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetModelSize(s)
	return tuo
}

// SetNillableModelSize sets the "modelSize" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableModelSize(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetModelSize(*s)
	}
	return tuo
}

// SetSourceUrl sets the "sourceUrl" field.
func (tuo *TranscriptionUpdateOne) SetSourceUrl(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetSourceUrl(s)
	return tuo
}

// SetNillableSourceUrl sets the "sourceUrl" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableSourceUrl(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetSourceUrl(*s)
	}
	return tuo
}

// ClearSourceUrl clears the value of the "sourceUrl" field.
func (tuo *TranscriptionUpdateOne) ClearSourceUrl() *TranscriptionUpdateOne {
	tuo.mutation.ClearSourceUrl()
	return tuo
}

// SetFileName sets the "fileName" field.
func (tuo *TranscriptionUpdateOne) SetFileName(s string) *TranscriptionUpdateOne {
	tuo.mutation.SetFileName(s)
	return tuo
}

// SetNillableFileName sets the "fileName" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableFileName(s *string) *TranscriptionUpdateOne {
	if s != nil {
		tuo.SetFileName(*s)
	}
	return tuo
}

// ClearFileName clears the value of the "fileName" field.
func (tuo *TranscriptionUpdateOne) ClearFileName() *TranscriptionUpdateOne {
	tuo.mutation.ClearFileName()
	return tuo
}

// SetResult sets the "result" field.
func (tuo *TranscriptionUpdateOne) SetResult(mr models.TranscriptionResult) *TranscriptionUpdateOne {
	tuo.mutation.SetResult(mr)
	return tuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableResult(mr *models.TranscriptionResult) *TranscriptionUpdateOne {
	if mr != nil {
		tuo.SetResult(*mr)
	}
	return tuo
}

// ClearResult clears the value of the "result" field.
func (tuo *TranscriptionUpdateOne) ClearResult() *TranscriptionUpdateOne {
	tuo.mutation.ClearResult()
	return tuo
}

// SetCreatedAt sets the "createdAt" field.
func (tuo *TranscriptionUpdateOne) SetCreatedAt(t time.Time) *TranscriptionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tuo *TranscriptionUpdateOne) SetNillableCreatedAt(t *time.Time) *TranscriptionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// AddTranslationIDs adds the "translations" edge to the Translation entity by IDs.
func (tuo *TranscriptionUpdateOne) AddTranslationIDs(ids ...int) *TranscriptionUpdateOne {
	tuo.mutation.AddTranslationIDs(ids...)
	return tuo
}

// AddTranslations adds the "translations" edges to the Translation entity.
func (tuo *TranscriptionUpdateOne) AddTranslations(t ...*Translation) *TranscriptionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTranslationIDs(ids...)
}

// Mutation returns the TranscriptionMutation object of the builder.
func (tuo *TranscriptionUpdateOne) Mutation() *TranscriptionMutation {
	return tuo.mutation
}

// ClearTranslations clears all "translations" edges to the Translation entity.
func (tuo *TranscriptionUpdateOne) ClearTranslations() *TranscriptionUpdateOne {
	tuo.mutation.ClearTranslations()
	return tuo
}

// RemoveTranslationIDs removes the "translations" edge to Translation entities by IDs.
func (tuo *TranscriptionUpdateOne) RemoveTranslationIDs(ids ...int) *TranscriptionUpdateOne {
	tuo.mutation.RemoveTranslationIDs(ids...)
	return tuo
}

// RemoveTranslations removes "translations" edges to Translation entities.
func (tuo *TranscriptionUpdateOne) RemoveTranslations(t ...*Translation) *TranscriptionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the TranscriptionUpdate builder.
func (tuo *TranscriptionUpdateOne) Where(ps ...predicate.Transcription) *TranscriptionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TranscriptionUpdateOne) Select(field string, fields ...string) *TranscriptionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transcription entity.
func (tuo *TranscriptionUpdateOne) Save(ctx context.Context) (*Transcription, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TranscriptionUpdateOne) SaveX(ctx context.Context) *Transcription {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TranscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TranscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TranscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Transcription, err error) {
	_spec := sqlgraph.NewUpdateSpec(transcription.Table, transcription.Columns, sqlgraph.NewFieldSpec(transcription.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transcription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transcription.FieldID)
		for _, f := range fields {
			if !transcription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transcription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transcription.FieldStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Diarize(); ok {
		_spec.SetField(transcription.FieldDiarize, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Language(); ok {
		_spec.SetField(transcription.FieldLanguage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Duration(); ok {
		_spec.SetField(transcription.FieldDuration, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Task(); ok {
		_spec.SetField(transcription.FieldTask, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Device(); ok {
		_spec.SetField(transcription.FieldDevice, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ModelSize(); ok {
		_spec.SetField(transcription.FieldModelSize, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SourceUrl(); ok {
		_spec.SetField(transcription.FieldSourceUrl, field.TypeString, value)
	}
	if tuo.mutation.SourceUrlCleared() {
		_spec.ClearField(transcription.FieldSourceUrl, field.TypeString)
	}
	if value, ok := tuo.mutation.FileName(); ok {
		_spec.SetField(transcription.FieldFileName, field.TypeString, value)
	}
	if tuo.mutation.FileNameCleared() {
		_spec.ClearField(transcription.FieldFileName, field.TypeString)
	}
	if value, ok := tuo.mutation.Result(); ok {
		_spec.SetField(transcription.FieldResult, field.TypeJSON, value)
	}
	if tuo.mutation.ResultCleared() {
		_spec.ClearField(transcription.FieldResult, field.TypeJSON)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transcription.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !tuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcription.TranslationsTable,
			Columns: []string{transcription.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(translation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transcription{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
