// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pluja/anysub/ent/predicate"
	"github.com/pluja/anysub/ent/transcription"
	"github.com/pluja/anysub/ent/translation"
	"github.com/pluja/anysub/models"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTranscription = "Transcription"
	TypeTranslation   = "Translation"
)

// TranscriptionMutation represents an operation that mutates the Transcription nodes in the graph.
type TranscriptionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	status              *string
	diarize             *bool
	language            *string
	task                *string
	device              *string
	modelSize           *string
	sourceUrl           *string
	fileName            *string
	result              *models.TranscriptionResult
	createdAt           *time.Time
	clearedFields       map[string]struct{}
	translations        map[int]struct{}
	removedtranslations map[int]struct{}
	clearedtranslations bool
	done                bool
	oldValue            func(context.Context) (*Transcription, error)
	predicates          []predicate.Transcription
}

var _ ent.Mutation = (*TranscriptionMutation)(nil)

// transcriptionOption allows management of the mutation configuration using functional options.
type transcriptionOption func(*TranscriptionMutation)

// newTranscriptionMutation creates new mutation for the Transcription entity.
func newTranscriptionMutation(c config, op Op, opts ...transcriptionOption) *TranscriptionMutation {
	m := &TranscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeTranscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranscriptionID sets the ID field of the mutation.
func withTranscriptionID(id int) transcriptionOption {
	return func(m *TranscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transcription
		)
		m.oldValue = func(ctx context.Context) (*Transcription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transcription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTranscription sets the old Transcription of the mutation.
func withTranscription(node *Transcription) transcriptionOption {
	return func(m *TranscriptionMutation) {
		m.oldValue = func(context.Context) (*Transcription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transcription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *TranscriptionMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *TranscriptionMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TranscriptionMutation) ResetStatus() {
	m.status = nil
}

// SetDiarize sets the "diarize" field.
func (m *TranscriptionMutation) SetDiarize(b bool) {
	m.diarize = &b
}

// Diarize returns the value of the "diarize" field in the mutation.
func (m *TranscriptionMutation) Diarize() (r bool, exists bool) {
	v := m.diarize
	if v == nil {
		return
	}
	return *v, true
}

// OldDiarize returns the old "diarize" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldDiarize(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiarize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiarize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiarize: %w", err)
	}
	return oldValue.Diarize, nil
}

// ResetDiarize resets all changes to the "diarize" field.
func (m *TranscriptionMutation) ResetDiarize() {
	m.diarize = nil
}

// SetLanguage sets the "language" field.
func (m *TranscriptionMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *TranscriptionMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *TranscriptionMutation) ResetLanguage() {
	m.language = nil
}

// SetTask sets the "task" field.
func (m *TranscriptionMutation) SetTask(s string) {
	m.task = &s
}

// Task returns the value of the "task" field in the mutation.
func (m *TranscriptionMutation) Task() (r string, exists bool) {
	v := m.task
	if v == nil {
		return
	}
	return *v, true
}

// OldTask returns the old "task" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldTask(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTask: %w", err)
	}
	return oldValue.Task, nil
}

// ResetTask resets all changes to the "task" field.
func (m *TranscriptionMutation) ResetTask() {
	m.task = nil
}

// SetDevice sets the "device" field.
func (m *TranscriptionMutation) SetDevice(s string) {
	m.device = &s
}

// Device returns the value of the "device" field in the mutation.
func (m *TranscriptionMutation) Device() (r string, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDevice returns the old "device" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevice: %w", err)
	}
	return oldValue.Device, nil
}

// ResetDevice resets all changes to the "device" field.
func (m *TranscriptionMutation) ResetDevice() {
	m.device = nil
}

// SetModelSize sets the "modelSize" field.
func (m *TranscriptionMutation) SetModelSize(s string) {
	m.modelSize = &s
}

// ModelSize returns the value of the "modelSize" field in the mutation.
func (m *TranscriptionMutation) ModelSize() (r string, exists bool) {
	v := m.modelSize
	if v == nil {
		return
	}
	return *v, true
}

// OldModelSize returns the old "modelSize" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldModelSize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelSize: %w", err)
	}
	return oldValue.ModelSize, nil
}

// ResetModelSize resets all changes to the "modelSize" field.
func (m *TranscriptionMutation) ResetModelSize() {
	m.modelSize = nil
}

// SetSourceUrl sets the "sourceUrl" field.
func (m *TranscriptionMutation) SetSourceUrl(s string) {
	m.sourceUrl = &s
}

// SourceUrl returns the value of the "sourceUrl" field in the mutation.
func (m *TranscriptionMutation) SourceUrl() (r string, exists bool) {
	v := m.sourceUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceUrl returns the old "sourceUrl" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldSourceUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceUrl: %w", err)
	}
	return oldValue.SourceUrl, nil
}

// ClearSourceUrl clears the value of the "sourceUrl" field.
func (m *TranscriptionMutation) ClearSourceUrl() {
	m.sourceUrl = nil
	m.clearedFields[transcription.FieldSourceUrl] = struct{}{}
}

// SourceUrlCleared returns if the "sourceUrl" field was cleared in this mutation.
func (m *TranscriptionMutation) SourceUrlCleared() bool {
	_, ok := m.clearedFields[transcription.FieldSourceUrl]
	return ok
}

// ResetSourceUrl resets all changes to the "sourceUrl" field.
func (m *TranscriptionMutation) ResetSourceUrl() {
	m.sourceUrl = nil
	delete(m.clearedFields, transcription.FieldSourceUrl)
}

// SetFileName sets the "fileName" field.
func (m *TranscriptionMutation) SetFileName(s string) {
	m.fileName = &s
}

// FileName returns the value of the "fileName" field in the mutation.
func (m *TranscriptionMutation) FileName() (r string, exists bool) {
	v := m.fileName
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "fileName" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ClearFileName clears the value of the "fileName" field.
func (m *TranscriptionMutation) ClearFileName() {
	m.fileName = nil
	m.clearedFields[transcription.FieldFileName] = struct{}{}
}

// FileNameCleared returns if the "fileName" field was cleared in this mutation.
func (m *TranscriptionMutation) FileNameCleared() bool {
	_, ok := m.clearedFields[transcription.FieldFileName]
	return ok
}

// ResetFileName resets all changes to the "fileName" field.
func (m *TranscriptionMutation) ResetFileName() {
	m.fileName = nil
	delete(m.clearedFields, transcription.FieldFileName)
}

// SetResult sets the "result" field.
func (m *TranscriptionMutation) SetResult(mr models.TranscriptionResult) {
	m.result = &mr
}

// Result returns the value of the "result" field in the mutation.
func (m *TranscriptionMutation) Result() (r models.TranscriptionResult, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldResult(ctx context.Context) (v models.TranscriptionResult, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *TranscriptionMutation) ClearResult() {
	m.result = nil
	m.clearedFields[transcription.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *TranscriptionMutation) ResultCleared() bool {
	_, ok := m.clearedFields[transcription.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *TranscriptionMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, transcription.FieldResult)
}

// SetCreatedAt sets the "createdAt" field.
func (m *TranscriptionMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *TranscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Transcription entity.
// If the Transcription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *TranscriptionMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// AddTranslationIDs adds the "translations" edge to the Translation entity by ids.
func (m *TranscriptionMutation) AddTranslationIDs(ids ...int) {
	if m.translations == nil {
		m.translations = make(map[int]struct{})
	}
	for i := range ids {
		m.translations[ids[i]] = struct{}{}
	}
}

// ClearTranslations clears the "translations" edge to the Translation entity.
func (m *TranscriptionMutation) ClearTranslations() {
	m.clearedtranslations = true
}

// TranslationsCleared reports if the "translations" edge to the Translation entity was cleared.
func (m *TranscriptionMutation) TranslationsCleared() bool {
	return m.clearedtranslations
}

// RemoveTranslationIDs removes the "translations" edge to the Translation entity by IDs.
func (m *TranscriptionMutation) RemoveTranslationIDs(ids ...int) {
	if m.removedtranslations == nil {
		m.removedtranslations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.translations, ids[i])
		m.removedtranslations[ids[i]] = struct{}{}
	}
}

// RemovedTranslations returns the removed IDs of the "translations" edge to the Translation entity.
func (m *TranscriptionMutation) RemovedTranslationsIDs() (ids []int) {
	for id := range m.removedtranslations {
		ids = append(ids, id)
	}
	return
}

// TranslationsIDs returns the "translations" edge IDs in the mutation.
func (m *TranscriptionMutation) TranslationsIDs() (ids []int) {
	for id := range m.translations {
		ids = append(ids, id)
	}
	return
}

// ResetTranslations resets all changes to the "translations" edge.
func (m *TranscriptionMutation) ResetTranslations() {
	m.translations = nil
	m.clearedtranslations = false
	m.removedtranslations = nil
}

// Where appends a list predicates to the TranscriptionMutation builder.
func (m *TranscriptionMutation) Where(ps ...predicate.Transcription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TranscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TranscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transcription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TranscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TranscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transcription).
func (m *TranscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranscriptionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.status != nil {
		fields = append(fields, transcription.FieldStatus)
	}
	if m.diarize != nil {
		fields = append(fields, transcription.FieldDiarize)
	}
	if m.language != nil {
		fields = append(fields, transcription.FieldLanguage)
	}
	if m.task != nil {
		fields = append(fields, transcription.FieldTask)
	}
	if m.device != nil {
		fields = append(fields, transcription.FieldDevice)
	}
	if m.modelSize != nil {
		fields = append(fields, transcription.FieldModelSize)
	}
	if m.sourceUrl != nil {
		fields = append(fields, transcription.FieldSourceUrl)
	}
	if m.fileName != nil {
		fields = append(fields, transcription.FieldFileName)
	}
	if m.result != nil {
		fields = append(fields, transcription.FieldResult)
	}
	if m.createdAt != nil {
		fields = append(fields, transcription.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transcription.FieldStatus:
		return m.Status()
	case transcription.FieldDiarize:
		return m.Diarize()
	case transcription.FieldLanguage:
		return m.Language()
	case transcription.FieldTask:
		return m.Task()
	case transcription.FieldDevice:
		return m.Device()
	case transcription.FieldModelSize:
		return m.ModelSize()
	case transcription.FieldSourceUrl:
		return m.SourceUrl()
	case transcription.FieldFileName:
		return m.FileName()
	case transcription.FieldResult:
		return m.Result()
	case transcription.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transcription.FieldStatus:
		return m.OldStatus(ctx)
	case transcription.FieldDiarize:
		return m.OldDiarize(ctx)
	case transcription.FieldLanguage:
		return m.OldLanguage(ctx)
	case transcription.FieldTask:
		return m.OldTask(ctx)
	case transcription.FieldDevice:
		return m.OldDevice(ctx)
	case transcription.FieldModelSize:
		return m.OldModelSize(ctx)
	case transcription.FieldSourceUrl:
		return m.OldSourceUrl(ctx)
	case transcription.FieldFileName:
		return m.OldFileName(ctx)
	case transcription.FieldResult:
		return m.OldResult(ctx)
	case transcription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Transcription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transcription.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case transcription.FieldDiarize:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiarize(v)
		return nil
	case transcription.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case transcription.FieldTask:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTask(v)
		return nil
	case transcription.FieldDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevice(v)
		return nil
	case transcription.FieldModelSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelSize(v)
		return nil
	case transcription.FieldSourceUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceUrl(v)
		return nil
	case transcription.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case transcription.FieldResult:
		v, ok := value.(models.TranscriptionResult)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case transcription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Transcription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranscriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranscriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Transcription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transcription.FieldSourceUrl) {
		fields = append(fields, transcription.FieldSourceUrl)
	}
	if m.FieldCleared(transcription.FieldFileName) {
		fields = append(fields, transcription.FieldFileName)
	}
	if m.FieldCleared(transcription.FieldResult) {
		fields = append(fields, transcription.FieldResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranscriptionMutation) ClearField(name string) error {
	switch name {
	case transcription.FieldSourceUrl:
		m.ClearSourceUrl()
		return nil
	case transcription.FieldFileName:
		m.ClearFileName()
		return nil
	case transcription.FieldResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown Transcription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranscriptionMutation) ResetField(name string) error {
	switch name {
	case transcription.FieldStatus:
		m.ResetStatus()
		return nil
	case transcription.FieldDiarize:
		m.ResetDiarize()
		return nil
	case transcription.FieldLanguage:
		m.ResetLanguage()
		return nil
	case transcription.FieldTask:
		m.ResetTask()
		return nil
	case transcription.FieldDevice:
		m.ResetDevice()
		return nil
	case transcription.FieldModelSize:
		m.ResetModelSize()
		return nil
	case transcription.FieldSourceUrl:
		m.ResetSourceUrl()
		return nil
	case transcription.FieldFileName:
		m.ResetFileName()
		return nil
	case transcription.FieldResult:
		m.ResetResult()
		return nil
	case transcription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Transcription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.translations != nil {
		edges = append(edges, transcription.EdgeTranslations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transcription.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.translations))
		for id := range m.translations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtranslations != nil {
		edges = append(edges, transcription.EdgeTranslations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranscriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case transcription.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.removedtranslations))
		for id := range m.removedtranslations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtranslations {
		edges = append(edges, transcription.EdgeTranslations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case transcription.EdgeTranslations:
		return m.clearedtranslations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranscriptionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Transcription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranscriptionMutation) ResetEdge(name string) error {
	switch name {
	case transcription.EdgeTranslations:
		m.ResetTranslations()
		return nil
	}
	return fmt.Errorf("unknown Transcription edge %s", name)
}

// TranslationMutation represents an operation that mutates the Translation nodes in the graph.
type TranslationMutation struct {
	config
	op             Op
	typ            string
	id             *int
	sourceLanguage *string
	targetLanguage *string
	status         *int
	addstatus      *int
	result         *models.TranscriptionResult
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Translation, error)
	predicates     []predicate.Translation
}

var _ ent.Mutation = (*TranslationMutation)(nil)

// translationOption allows management of the mutation configuration using functional options.
type translationOption func(*TranslationMutation)

// newTranslationMutation creates new mutation for the Translation entity.
func newTranslationMutation(c config, op Op, opts ...translationOption) *TranslationMutation {
	m := &TranslationMutation{
		config:        c,
		op:            op,
		typ:           TypeTranslation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTranslationID sets the ID field of the mutation.
func withTranslationID(id int) translationOption {
	return func(m *TranslationMutation) {
		var (
			err   error
			once  sync.Once
			value *Translation
		)
		m.oldValue = func(ctx context.Context) (*Translation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Translation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTranslation sets the old Translation of the mutation.
func withTranslation(node *Translation) translationOption {
	return func(m *TranslationMutation) {
		m.oldValue = func(context.Context) (*Translation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TranslationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TranslationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TranslationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TranslationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Translation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSourceLanguage sets the "sourceLanguage" field.
func (m *TranslationMutation) SetSourceLanguage(s string) {
	m.sourceLanguage = &s
}

// SourceLanguage returns the value of the "sourceLanguage" field in the mutation.
func (m *TranslationMutation) SourceLanguage() (r string, exists bool) {
	v := m.sourceLanguage
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceLanguage returns the old "sourceLanguage" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldSourceLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceLanguage: %w", err)
	}
	return oldValue.SourceLanguage, nil
}

// ResetSourceLanguage resets all changes to the "sourceLanguage" field.
func (m *TranslationMutation) ResetSourceLanguage() {
	m.sourceLanguage = nil
}

// SetTargetLanguage sets the "targetLanguage" field.
func (m *TranslationMutation) SetTargetLanguage(s string) {
	m.targetLanguage = &s
}

// TargetLanguage returns the value of the "targetLanguage" field in the mutation.
func (m *TranslationMutation) TargetLanguage() (r string, exists bool) {
	v := m.targetLanguage
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetLanguage returns the old "targetLanguage" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldTargetLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetLanguage: %w", err)
	}
	return oldValue.TargetLanguage, nil
}

// ResetTargetLanguage resets all changes to the "targetLanguage" field.
func (m *TranslationMutation) ResetTargetLanguage() {
	m.targetLanguage = nil
}

// SetStatus sets the "status" field.
func (m *TranslationMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TranslationMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TranslationMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TranslationMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TranslationMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetResult sets the "result" field.
func (m *TranslationMutation) SetResult(mr models.TranscriptionResult) {
	m.result = &mr
}

// Result returns the value of the "result" field in the mutation.
func (m *TranslationMutation) Result() (r models.TranscriptionResult, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Translation entity.
// If the Translation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TranslationMutation) OldResult(ctx context.Context) (v models.TranscriptionResult, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult resets all changes to the "result" field.
func (m *TranslationMutation) ResetResult() {
	m.result = nil
}

// Where appends a list predicates to the TranslationMutation builder.
func (m *TranslationMutation) Where(ps ...predicate.Translation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TranslationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TranslationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Translation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TranslationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TranslationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Translation).
func (m *TranslationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TranslationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.sourceLanguage != nil {
		fields = append(fields, translation.FieldSourceLanguage)
	}
	if m.targetLanguage != nil {
		fields = append(fields, translation.FieldTargetLanguage)
	}
	if m.status != nil {
		fields = append(fields, translation.FieldStatus)
	}
	if m.result != nil {
		fields = append(fields, translation.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TranslationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case translation.FieldSourceLanguage:
		return m.SourceLanguage()
	case translation.FieldTargetLanguage:
		return m.TargetLanguage()
	case translation.FieldStatus:
		return m.Status()
	case translation.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TranslationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case translation.FieldSourceLanguage:
		return m.OldSourceLanguage(ctx)
	case translation.FieldTargetLanguage:
		return m.OldTargetLanguage(ctx)
	case translation.FieldStatus:
		return m.OldStatus(ctx)
	case translation.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown Translation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranslationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case translation.FieldSourceLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceLanguage(v)
		return nil
	case translation.FieldTargetLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetLanguage(v)
		return nil
	case translation.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case translation.FieldResult:
		v, ok := value.(models.TranscriptionResult)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown Translation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TranslationMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, translation.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TranslationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case translation.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TranslationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case translation.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Translation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TranslationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TranslationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TranslationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Translation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TranslationMutation) ResetField(name string) error {
	switch name {
	case translation.FieldSourceLanguage:
		m.ResetSourceLanguage()
		return nil
	case translation.FieldTargetLanguage:
		m.ResetTargetLanguage()
		return nil
	case translation.FieldStatus:
		m.ResetStatus()
		return nil
	case translation.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown Translation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TranslationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TranslationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TranslationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TranslationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TranslationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TranslationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TranslationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Translation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TranslationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Translation edge %s", name)
}
