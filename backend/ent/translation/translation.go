// Code generated by ent, DO NOT EDIT.

package translation

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the translation type in the database.
	Label = "translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceLanguage holds the string denoting the sourcelanguage field in the database.
	FieldSourceLanguage = "source_language"
	// FieldTargetLanguage holds the string denoting the targetlanguage field in the database.
	FieldTargetLanguage = "target_language"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// Table holds the table name of the translation in the database.
	Table = "translations"
)

// Columns holds all SQL columns for translation fields.
var Columns = []string{
	FieldID,
	FieldSourceLanguage,
	FieldTargetLanguage,
	FieldStatus,
	FieldResult,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "translations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"transcription_translations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Translation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceLanguage orders the results by the sourceLanguage field.
func BySourceLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceLanguage, opts...).ToFunc()
}

// ByTargetLanguage orders the results by the targetLanguage field.
func ByTargetLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetLanguage, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
