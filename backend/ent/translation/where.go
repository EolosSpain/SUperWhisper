// Code generated by ent, DO NOT EDIT.

package translation

import (
	"entgo.io/ent/dialect/sql"
	"github.com/pluja/anysub/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldID, id))
}

// SourceLanguage applies equality check predicate on the "sourceLanguage" field. It's identical to SourceLanguageEQ.
func SourceLanguage(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldSourceLanguage, v))
}

// TargetLanguage applies equality check predicate on the "targetLanguage" field. It's identical to TargetLanguageEQ.
func TargetLanguage(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldTargetLanguage, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldStatus, v))
}

// SourceLanguageEQ applies the EQ predicate on the "sourceLanguage" field.
func SourceLanguageEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldSourceLanguage, v))
}

// SourceLanguageNEQ applies the NEQ predicate on the "sourceLanguage" field.
func SourceLanguageNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldSourceLanguage, v))
}

// SourceLanguageIn applies the In predicate on the "sourceLanguage" field.
func SourceLanguageIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldSourceLanguage, vs...))
}

// SourceLanguageNotIn applies the NotIn predicate on the "sourceLanguage" field.
func SourceLanguageNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldSourceLanguage, vs...))
}

// SourceLanguageGT applies the GT predicate on the "sourceLanguage" field.
func SourceLanguageGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldSourceLanguage, v))
}

// SourceLanguageGTE applies the GTE predicate on the "sourceLanguage" field.
func SourceLanguageGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldSourceLanguage, v))
}

// SourceLanguageLT applies the LT predicate on the "sourceLanguage" field.
func SourceLanguageLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldSourceLanguage, v))
}

// SourceLanguageLTE applies the LTE predicate on the "sourceLanguage" field.
func SourceLanguageLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldSourceLanguage, v))
}

// SourceLanguageContains applies the Contains predicate on the "sourceLanguage" field.
func SourceLanguageContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldSourceLanguage, v))
}

// SourceLanguageHasPrefix applies the HasPrefix predicate on the "sourceLanguage" field.
func SourceLanguageHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldSourceLanguage, v))
}

// SourceLanguageHasSuffix applies the HasSuffix predicate on the "sourceLanguage" field.
func SourceLanguageHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldSourceLanguage, v))
}

// SourceLanguageEqualFold applies the EqualFold predicate on the "sourceLanguage" field.
func SourceLanguageEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldSourceLanguage, v))
}

// SourceLanguageContainsFold applies the ContainsFold predicate on the "sourceLanguage" field.
func SourceLanguageContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldSourceLanguage, v))
}

// TargetLanguageEQ applies the EQ predicate on the "targetLanguage" field.
func TargetLanguageEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldTargetLanguage, v))
}

// TargetLanguageNEQ applies the NEQ predicate on the "targetLanguage" field.
func TargetLanguageNEQ(v string) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldTargetLanguage, v))
}

// TargetLanguageIn applies the In predicate on the "targetLanguage" field.
func TargetLanguageIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldTargetLanguage, vs...))
}

// TargetLanguageNotIn applies the NotIn predicate on the "targetLanguage" field.
func TargetLanguageNotIn(vs ...string) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldTargetLanguage, vs...))
}

// TargetLanguageGT applies the GT predicate on the "targetLanguage" field.
func TargetLanguageGT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldTargetLanguage, v))
}

// TargetLanguageGTE applies the GTE predicate on the "targetLanguage" field.
func TargetLanguageGTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldTargetLanguage, v))
}

// TargetLanguageLT applies the LT predicate on the "targetLanguage" field.
func TargetLanguageLT(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldTargetLanguage, v))
}

// TargetLanguageLTE applies the LTE predicate on the "targetLanguage" field.
func TargetLanguageLTE(v string) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldTargetLanguage, v))
}

// TargetLanguageContains applies the Contains predicate on the "targetLanguage" field.
func TargetLanguageContains(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContains(FieldTargetLanguage, v))
}

// TargetLanguageHasPrefix applies the HasPrefix predicate on the "targetLanguage" field.
func TargetLanguageHasPrefix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasPrefix(FieldTargetLanguage, v))
}

// TargetLanguageHasSuffix applies the HasSuffix predicate on the "targetLanguage" field.
func TargetLanguageHasSuffix(v string) predicate.Translation {
	return predicate.Translation(sql.FieldHasSuffix(FieldTargetLanguage, v))
}

// TargetLanguageEqualFold applies the EqualFold predicate on the "targetLanguage" field.
func TargetLanguageEqualFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldEqualFold(FieldTargetLanguage, v))
}

// TargetLanguageContainsFold applies the ContainsFold predicate on the "targetLanguage" field.
func TargetLanguageContainsFold(v string) predicate.Translation {
	return predicate.Translation(sql.FieldContainsFold(FieldTargetLanguage, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Translation {
	return predicate.Translation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Translation {
	return predicate.Translation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Translation {
	return predicate.Translation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Translation {
	return predicate.Translation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Translation {
	return predicate.Translation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Translation {
	return predicate.Translation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Translation {
	return predicate.Translation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Translation {
	return predicate.Translation(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Translation) predicate.Translation {
	return predicate.Translation(sql.NotPredicates(p))
}
