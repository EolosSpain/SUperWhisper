// Code generated by ent, DO NOT EDIT.

package transcription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/pluja/anysub/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldStatus, v))
}

// Diarize applies equality check predicate on the "diarize" field. It's identical to DiarizeEQ.
func Diarize(v bool) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldDiarize, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldLanguage, v))
}

// Task applies equality check predicate on the "task" field. It's identical to TaskEQ.
func Task(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldTask, v))
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldDevice, v))
}

// ModelSize applies equality check predicate on the "modelSize" field. It's identical to ModelSizeEQ.
func ModelSize(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldModelSize, v))
}

// SourceUrl applies equality check predicate on the "sourceUrl" field. It's identical to SourceUrlEQ.
func SourceUrl(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldSourceUrl, v))
}

// FileName applies equality check predicate on the "fileName" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldFileName, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldStatus, v))
}

// DiarizeEQ applies the EQ predicate on the "diarize" field.
func DiarizeEQ(v bool) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldDiarize, v))
}

// DiarizeNEQ applies the NEQ predicate on the "diarize" field.
func DiarizeNEQ(v bool) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldDiarize, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldLanguage, v))
}

// TaskEQ applies the EQ predicate on the "task" field.
func TaskEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldTask, v))
}

// TaskNEQ applies the NEQ predicate on the "task" field.
func TaskNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldTask, v))
}

// TaskIn applies the In predicate on the "task" field.
func TaskIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldTask, vs...))
}

// TaskNotIn applies the NotIn predicate on the "task" field.
func TaskNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldTask, vs...))
}

// TaskGT applies the GT predicate on the "task" field.
func TaskGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldTask, v))
}

// TaskGTE applies the GTE predicate on the "task" field.
func TaskGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldTask, v))
}

// TaskLT applies the LT predicate on the "task" field.
func TaskLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldTask, v))
}

// TaskLTE applies the LTE predicate on the "task" field.
func TaskLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldTask, v))
}

// TaskContains applies the Contains predicate on the "task" field.
func TaskContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldTask, v))
}

// TaskHasPrefix applies the HasPrefix predicate on the "task" field.
func TaskHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldTask, v))
}

// TaskHasSuffix applies the HasSuffix predicate on the "task" field.
func TaskHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldTask, v))
}

// TaskEqualFold applies the EqualFold predicate on the "task" field.
func TaskEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldTask, v))
}

// TaskContainsFold applies the ContainsFold predicate on the "task" field.
func TaskContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldTask, v))
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldDevice, v))
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldDevice, v))
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldDevice, vs...))
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldDevice, vs...))
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldDevice, v))
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldDevice, v))
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldDevice, v))
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldDevice, v))
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldDevice, v))
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldDevice, v))
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldDevice, v))
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldDevice, v))
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldDevice, v))
}

// ModelSizeEQ applies the EQ predicate on the "modelSize" field.
func ModelSizeEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldModelSize, v))
}

// ModelSizeNEQ applies the NEQ predicate on the "modelSize" field.
func ModelSizeNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldModelSize, v))
}

// ModelSizeIn applies the In predicate on the "modelSize" field.
func ModelSizeIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldModelSize, vs...))
}

// ModelSizeNotIn applies the NotIn predicate on the "modelSize" field.
func ModelSizeNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldModelSize, vs...))
}

// ModelSizeGT applies the GT predicate on the "modelSize" field.
func ModelSizeGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldModelSize, v))
}

// ModelSizeGTE applies the GTE predicate on the "modelSize" field.
func ModelSizeGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldModelSize, v))
}

// ModelSizeLT applies the LT predicate on the "modelSize" field.
func ModelSizeLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldModelSize, v))
}

// ModelSizeLTE applies the LTE predicate on the "modelSize" field.
func ModelSizeLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldModelSize, v))
}

// ModelSizeContains applies the Contains predicate on the "modelSize" field.
func ModelSizeContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldModelSize, v))
}

// ModelSizeHasPrefix applies the HasPrefix predicate on the "modelSize" field.
func ModelSizeHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldModelSize, v))
}

// ModelSizeHasSuffix applies the HasSuffix predicate on the "modelSize" field.
func ModelSizeHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldModelSize, v))
}

// ModelSizeEqualFold applies the EqualFold predicate on the "modelSize" field.
func ModelSizeEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldModelSize, v))
}

// ModelSizeContainsFold applies the ContainsFold predicate on the "modelSize" field.
func ModelSizeContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldModelSize, v))
}

// SourceUrlEQ applies the EQ predicate on the "sourceUrl" field.
func SourceUrlEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldSourceUrl, v))
}

// SourceUrlNEQ applies the NEQ predicate on the "sourceUrl" field.
func SourceUrlNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldSourceUrl, v))
}

// SourceUrlIn applies the In predicate on the "sourceUrl" field.
func SourceUrlIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldSourceUrl, vs...))
}

// SourceUrlNotIn applies the NotIn predicate on the "sourceUrl" field.
func SourceUrlNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldSourceUrl, vs...))
}

// SourceUrlGT applies the GT predicate on the "sourceUrl" field.
func SourceUrlGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldSourceUrl, v))
}

// SourceUrlGTE applies the GTE predicate on the "sourceUrl" field.
func SourceUrlGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldSourceUrl, v))
}

// SourceUrlLT applies the LT predicate on the "sourceUrl" field.
func SourceUrlLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldSourceUrl, v))
}

// SourceUrlLTE applies the LTE predicate on the "sourceUrl" field.
func SourceUrlLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldSourceUrl, v))
}

// SourceUrlContains applies the Contains predicate on the "sourceUrl" field.
func SourceUrlContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldSourceUrl, v))
}

// SourceUrlHasPrefix applies the HasPrefix predicate on the "sourceUrl" field.
func SourceUrlHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldSourceUrl, v))
}

// SourceUrlHasSuffix applies the HasSuffix predicate on the "sourceUrl" field.
func SourceUrlHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldSourceUrl, v))
}

// SourceUrlIsNil applies the IsNil predicate on the "sourceUrl" field.
func SourceUrlIsNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldIsNull(FieldSourceUrl))
}

// SourceUrlNotNil applies the NotNil predicate on the "sourceUrl" field.
func SourceUrlNotNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldNotNull(FieldSourceUrl))
}

// SourceUrlEqualFold applies the EqualFold predicate on the "sourceUrl" field.
func SourceUrlEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldSourceUrl, v))
}

// SourceUrlContainsFold applies the ContainsFold predicate on the "sourceUrl" field.
func SourceUrlContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldSourceUrl, v))
}

// FileNameEQ applies the EQ predicate on the "fileName" field.
func FileNameEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "fileName" field.
func FileNameNEQ(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "fileName" field.
func FileNameIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "fileName" field.
func FileNameNotIn(vs ...string) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "fileName" field.
func FileNameGT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "fileName" field.
func FileNameGTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "fileName" field.
func FileNameLT(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "fileName" field.
func FileNameLTE(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "fileName" field.
func FileNameContains(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "fileName" field.
func FileNameHasPrefix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "fileName" field.
func FileNameHasSuffix(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameIsNil applies the IsNil predicate on the "fileName" field.
func FileNameIsNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldIsNull(FieldFileName))
}

// FileNameNotNil applies the NotNil predicate on the "fileName" field.
func FileNameNotNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldNotNull(FieldFileName))
}

// FileNameEqualFold applies the EqualFold predicate on the "fileName" field.
func FileNameEqualFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "fileName" field.
func FileNameContainsFold(v string) predicate.Transcription {
	return predicate.Transcription(sql.FieldContainsFold(FieldFileName, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Transcription {
	return predicate.Transcription(sql.FieldNotNull(FieldResult))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Transcription {
	return predicate.Transcription(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.Transcription {
	return predicate.Transcription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.Translation) predicate.Transcription {
	return predicate.Transcription(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transcription) predicate.Transcription {
	return predicate.Transcription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transcription) predicate.Transcription {
	return predicate.Transcription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transcription) predicate.Transcription {
	return predicate.Transcription(sql.NotPredicates(p))
}
