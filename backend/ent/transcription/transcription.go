// Code generated by ent, DO NOT EDIT.

package transcription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transcription type in the database.
	Label = "transcription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDiarize holds the string denoting the diarize field in the database.
	FieldDiarize = "diarize"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldTask holds the string denoting the task field in the database.
	FieldTask = "task"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldModelSize holds the string denoting the modelsize field in the database.
	FieldModelSize = "model_size"
	// FieldSourceUrl holds the string denoting the sourceurl field in the database.
	FieldSourceUrl = "source_url"
	// FieldFileName holds the string denoting the filename field in the database.
	FieldFileName = "file_name"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the transcription in the database.
	Table = "transcriptions"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "translations"
	// TranslationsInverseTable is the table name for the Translation entity.
	// It exists in this package in order to avoid circular dependency with the "translation" package.
	TranslationsInverseTable = "translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "transcription_translations"
)

// Columns holds all SQL columns for transcription fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldDiarize,
	FieldLanguage,
	FieldTask,
	FieldDevice,
	FieldModelSize,
	FieldSourceUrl,
	FieldFileName,
	FieldResult,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultDiarize holds the default value on creation for the "diarize" field.
	DefaultDiarize bool
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultTask holds the default value on creation for the "task" field.
	DefaultTask string
	// DefaultDevice holds the default value on creation for the "device" field.
	DefaultDevice string
	// DefaultModelSize holds the default value on creation for the "modelSize" field.
	DefaultModelSize string
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Transcription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDiarize orders the results by the diarize field.
func ByDiarize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiarize, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByTask orders the results by the task field.
func ByTask(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTask, opts...).ToFunc()
}

// ByDevice orders the results by the device field.
func ByDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevice, opts...).ToFunc()
}

// ByModelSize orders the results by the modelSize field.
func ByModelSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelSize, opts...).ToFunc()
}

// BySourceUrl orders the results by the sourceUrl field.
func BySourceUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceUrl, opts...).ToFunc()
}

// ByFileName orders the results by the fileName field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
