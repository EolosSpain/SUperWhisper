// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pluja/anysub/ent/translation"
	"github.com/pluja/anysub/models"
)

// Translation is the model entity for the Translation schema.
type Translation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceLanguage holds the value of the "sourceLanguage" field.
	SourceLanguage string `json:"sourceLanguage"`
	// TargetLanguage holds the value of the "targetLanguage" field.
	TargetLanguage string `json:"targetLanguage"`
	// Status holds the value of the "status" field.
	Status string `json:"status"`
	// Result holds the value of the "result" field.
	Result                     models.TranscriptionResult `json:"result"`
	transcription_translations *int
	selectValues               sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Translation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case translation.FieldResult:
			values[i] = new([]byte)
		case translation.FieldID:
			values[i] = new(sql.NullInt64)
		case translation.FieldSourceLanguage, translation.FieldTargetLanguage, translation.FieldStatus:
			values[i] = new(sql.NullString)
		case translation.ForeignKeys[0]: // transcription_translations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Translation fields.
func (t *Translation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case translation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case translation.FieldSourceLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceLanguage", values[i])
			} else if value.Valid {
				t.SourceLanguage = value.String
			}
		case translation.FieldTargetLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field targetLanguage", values[i])
			} else if value.Valid {
				t.TargetLanguage = value.String
			}
		case translation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case translation.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Result); err != nil {
					return fmt.Errorf("unmarshal field result: %w", err)
				}
			}
		case translation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transcription_translations", value)
			} else if value.Valid {
				t.transcription_translations = new(int)
				*t.transcription_translations = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Translation.
// This includes values selected through modifiers, order, etc.
func (t *Translation) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Translation.
// Note that you need to call Translation.Unwrap() before calling this method if this Translation
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Translation) Update() *TranslationUpdateOne {
	return NewTranslationClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Translation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Translation) Unwrap() *Translation {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Translation is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Translation) String() string {
	var builder strings.Builder
	builder.WriteString("Translation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("sourceLanguage=")
	builder.WriteString(t.SourceLanguage)
	builder.WriteString(", ")
	builder.WriteString("targetLanguage=")
	builder.WriteString(t.TargetLanguage)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", t.Result))
	builder.WriteByte(')')
	return builder.String()
}

// Translations is a parsable slice of Translation.
type Translations []*Translation
